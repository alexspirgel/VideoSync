/*!
 * VideoSync v1.0.0
 * https://github.com/alexspirgel/video-sync
 */
var VideoSync;(()=>{var e={683:(e,t,i)=>{const n=i(605);e.exports=function(e){return"object"==typeof e&&null!==e&&1===e.nodeType&&!n(e)}},605:e=>{e.exports=function(e){if("object"!=typeof e||null===e||"[object Object]"!==Object.prototype.toString.call(e))return!1;if(null===Object.getPrototypeOf(e))return!0;let t=e;for(;null!==Object.getPrototypeOf(t);)t=Object.getPrototypeOf(t);return Object.getPrototypeOf(e)===t}},364:(e,t,i)=>{const n=i(683);e.exports=function e(t,i=new Set){if(Array.isArray(t)||t instanceof NodeList)for(let n of t)e(n,i);else if("string"==typeof t){e(document.querySelectorAll(t),i)}else n(t)&&i.add(t);return Array.from(i)}},946:(e,t,i)=>{const n=i(364);e.exports=class VideoSync{static isVideoElement(e){return!!(HTMLVideoElement&&e instanceof HTMLVideoElement)||"VIDEO"===e.tagName}constructor(e){this.syncedVideoElements=e.syncedVideoElements,null!==e.primarySyncedVideoElement&&void 0!==e.primarySyncedVideoElement&&(this.primarySyncedVideoElement=e.primarySyncedVideoElement),this.syncFrequency=e.syncFrequency,this.minimumPlaybackRate=e.minimumPlaybackRate,this.maximumPlaybackRate=e.maximumPlaybackRate,this.debug=e.debug,this.debugMessage(this)}set primarySyncedVideoElement(e){if(null==e)return this.primarySyncedVideoElement&&this.removePrimaryVideoElementEventListeners(this.primarySyncedVideoElement),this.stopPlaybackRateSync(),this._primarySyncedVideoElement=e,this.debugMessage("'primarySyncedVideoElement' has been removed."),this.primarySyncedVideoElement;const t=n(e)[0];if(this.syncedVideoElements.includes(t))return this.primarySyncedVideoElement&&this.removePrimaryVideoElementEventListeners(this.primarySyncedVideoElement),this._primarySyncedVideoElement=t,this.addPrimaryVideoElementEventListeners(t),this.debugMessage("Added 'primarySyncedVideoElement': ",this.primarySyncedVideoElement),this.primarySyncedVideoElement;throw new Error("'primarySyncedVideoElement' must be one of the 'syncedVideoElements' or 'null'.")}get primarySyncedVideoElement(){return this._primarySyncedVideoElement}set syncedVideoElements(e){const t=n(e);if(this._syncedVideoElements=[],this.primarySyncedVideoElement=null,t.length>0)for(const e of t)this.addSyncedVideoElement(e);else this.debugMessage("No elements found to add.")}get syncedVideoElements(){return Array.isArray(this._syncedVideoElements)?this._syncedVideoElements:[]}addSyncedVideoElement(e){const t=n(e)[0];if(t&&this.constructor.isVideoElement(t)){return this.syncedVideoElements.indexOf(t)>=0?(this.debugMessage("Element is already a synced video element, it cannot be added twice."),null):(this.debugMessage("Adding synced video element: ",t),this.syncedVideoElements.push(t),this.primarySyncedVideoElement||(this.debugMessage("'primarySyncedVideoElement' is not set, the newly added synced video element will be set as 'primarySyncedVideoElement'."),this.primarySyncedVideoElement=t),t)}throw new Error("Argument must be a video element.")}removeSyncedVideoElement(e){const t=n(e)[0];if(t&&this.constructor.isVideoElement(t)){const e=this.syncedVideoElements.indexOf(t);return e>=0?(this.debugMessage("Removing synced video element: ",t),this.syncedVideoElements.splice(e,1),this.primarySyncedVideoElement===t&&(this.primarySyncedVideoElement=null,this.debugMessage("Attempting to set new 'primarySyncedVideoElement'...'"),this.syncedVideoElements.length>0?this.primarySyncedVideoElement=this.syncedVideoElements[0]:this.debugMessage("There are no remaining 'syncedVideoElements' to set as primary.")),t):(this.debugMessage("Did not find matching synced video element to remove."),null)}throw new Error("Argument must be a video element.")}set syncFrequency(e){if(null==e&&(e=250),"number"==typeof e&&e>0)return this._syncFrequency=e,this.syncFrequency;throw new Error("'syncFrequency' must be a number larger than zero.")}get syncFrequency(){return this._syncFrequency}set minimumPlaybackRate(e){if(null==e&&(e=.33),"number"==typeof e&&e>0)return this._minimumPlaybackRate=e,this.minimumPlaybackRate;throw new Error("'minimumPlaybackRate' must be a number larger than zero.")}get minimumPlaybackRate(){return this._minimumPlaybackRate}set maximumPlaybackRate(e){if(null==e&&(e=3),"number"==typeof e){if(e>0)return this._maximumPlaybackRate=e,this.maximumPlaybackRate}else this._maximumPlaybackRate=3}get maximumPlaybackRate(){return this._maximumPlaybackRate}play(e){this.startPlaybackRateSync();for(let t=0;t<this.syncedVideoElements.length;t++){const i=this.syncedVideoElements[t];i!==e&&(this.debugMessage("play",i),i.play())}}pause(e){for(let t=0;t<this.syncedVideoElements.length;t++){const i=this.syncedVideoElements[t];i!==e&&(this.debugMessage("pause",i),i.pause())}this.stopPlaybackRateSync()}currentTime(e,t){for(let i=0;i<this.syncedVideoElements.length;i++){const n=this.syncedVideoElements[i];n!==t&&(this.debugMessage("currentTime()",e,n),n.currentTime=e)}}playbackRate(e,t){for(let i=0;i<this.syncedVideoElements.length;i++){const n=this.syncedVideoElements[i];n!==t&&(this.debugMessage("playbackRate",e,n),n.playbackRate=e)}}addPrimaryVideoElementEventListeners(e){e.addEventListener("play",this.primaryVideoElementPlayHandler),e.addEventListener("pause",this.primaryVideoElementPauseHandler),e.addEventListener("seeked",this.primaryVideoElementSeekedHandler)}removePrimaryVideoElementEventListeners(e){e.removeEventListener("play",this.primaryVideoElementPlayHandler),e.removeEventListener("pause",this.primaryVideoElementPauseHandler),e.removeEventListener("seeked",this.primaryVideoElementSeekedHandler)}primaryVideoElementPlayHandler=e=>{if(this.debugMessage("primaryVideoElementPlayHandler",e),this.ignoreNextEventList.play&&this.ignoreNextEventList.play.includes(e.target))return this.debugMessage("primaryVideoElementPlayHandler CANCELLED"),void this.removeIgnoreNextEvent("play",e.target);this.play(e.target)};primaryVideoElementPauseHandler=e=>{if(this.debugMessage("primaryVideoElementPauseHandler",e),this.ignoreNextEventList.pause&&this.ignoreNextEventList.pause.includes(e.target))return this.debugMessage("primaryVideoElementPauseHandler CANCELLED"),void this.removeIgnoreNextEvent("pause",e.target);this.pause(e.target)};primaryVideoElementSeekedHandler=e=>{if(this.debugMessage("primaryVideoElementSeekedHandler",e),this.ignoreNextEventList.seeked&&this.ignoreNextEventList.seeked.includes(e.target))return this.debugMessage("primaryVideoElementSeekedHandler CANCELLED"),void this.removeIgnoreNextEvent("seeked",e.target);this.currentTime(e.target.currentTime,e.target)};get ignoreNextEventList(){return this._ignoreNextEventList||(this._ignoreNextEventList={}),this._ignoreNextEventList}addIgnoreNextEvent(e,t){this.ignoreNextEventList[e]||(this.ignoreNextEventList[e]=[]),this.ignoreNextEventList[e].includes(t)||this.ignoreNextEventList[e].push(t)}removeIgnoreNextEvent(e,t){if(this.ignoreNextEventList[e]){const i=this.ignoreNextEventList[e].indexOf(t);i>=0&&this.ignoreNextEventList[e].splice(i,1)}}forceExactPlaybackSync(){this.primarySyncedVideoElement?this.syncedVideoElements.length<2?this.debugMessage("Must have a at least 2 'syncedVideoElements' to force exact playback sync."):this.primarySyncedVideoElement&&(this.currentTime(this.primarySyncedVideoElement.currentTime,this.primarySyncedVideoElement),this.playbackRate(this.primarySyncedVideoElement.playbackRate,this.primarySyncedVideoElement)):this.debugMessage("Must have a 'primarySyncedVideoElement' to force exact playback sync.")}startPlaybackRateSync(){this.playbackRateSyncLoop?this.debugMessage("Playback rate sync loop has already started."):this.syncedVideoElements.length<2?this.debugMessage("Must have a at least 2 'syncedVideoElements' to start playback rate syncing."):(this.forceExactPlaybackSync(),this.playbackRateSyncLoop&&clearInterval(this.playbackRateSyncLoop),this.playbackRateSyncLoop=setInterval(this.playbackRateSyncTick,this.syncFrequency),this.debugMessage("Started playback rate syncing."))}playbackRateSyncTick=()=>{if(!this.primarySyncedVideoElement)return this.debugMessage("No 'primarySyncedVideoElement', stopping playback rate sync."),void this.stopPlaybackRateSync();for(let e=0;e<this.syncedVideoElements.length;e++){const t=this.syncedVideoElements[e];if(t!==this.primarySyncedVideoElement){const e=this.primarySyncedVideoElement.currentTime-t.currentTime;let i=Math.min(Math.max(e/2+1,this.minimumPlaybackRate),this.maximumPlaybackRate).toFixed(2);i>.99&&i<1.01?(this.debugMessage("Video playback rate in sync with primary.",t),i=1):(this.debugMessage(`Video new playback rate: ${i}.`,t),t.playbackRate=i)}}};stopPlaybackRateSync(){this.playbackRateSyncLoop?(this.playbackRateSyncLoop&&(clearInterval(this.playbackRateSyncLoop),this.playbackRateSyncLoop=null),this.debugMessage("Stopped playback rate syncing.")):this.debugMessage("Playback rate syncing has already stopped.")}debugMessage(...e){this.debug&&console.log("VideoSync debug:",...e)}}}},t={};var i=function i(n){var s=t[n];if(void 0!==s)return s.exports;var a=t[n]={exports:{}};return e[n](a,a.exports,i),a.exports}(946);VideoSync=i})();